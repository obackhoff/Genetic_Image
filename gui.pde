/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void controls_draw(PApplet appc, GWinData data) { //_CODE_:controls:768437:
  appc.background(230);
  if (loop) t = int(System.nanoTime()/1E9) - tOff;
  int h = (t / 60) / 60;
  int m = (t / 60) % 60;
  int s = t % 60;
  time.setText("Time elapsed: " + String.format("%02d", h) + ":" + String.format("%02d", m) + ":" + String.format("%02d", s) );
} //_CODE_:controls:768437:

public void popsize_changed(GTextField source, GEvent event) { //_CODE_:popsize:603875:
  println("popsize - GTextField >> GEvent." + event + " @ " + millis());
 

} //_CODE_:popsize:603875:

public void numshapes_change(GTextField source, GEvent event) { //_CODE_:numshapes:855437:
  println("numshapes - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:numshapes:855437:

public void select_click(GButton source, GEvent event) { //_CODE_:select:522569:
  println("select - GButton >> GEvent." + event + " @ " + millis());
  if(img == null){
    loop = false;
    preload();
  }

} //_CODE_:select:522569:

public void start_click(GButton source, GEvent event) { //_CODE_:start:267914:
  println("start - GButton >> GEvent." + event + " @ " + millis());
  tempTime = t;
    if(!started){
    float redImg, greenImg, blueImg;
    float r=0, g=0, b=0;
    int numPixels = img.pixels.length;
    for(int i = 0; i < numPixels; i++){
        redImg = red(img.pixels[i]);
        greenImg = green(img.pixels[i]);
        blueImg = blue(img.pixels[i]);
        r += redImg / numPixels; 
        g += greenImg / numPixels; 
        b += blueImg / numPixels; 
    }
    if(!bw) bg = color(r,g,b);
    else bg = color((r+g+b)/3.0);
    
    if(selMethod == "Fixed"){
      pop = new Population(parseInt(popsize.getText()), parseInt(numshapes.getText()));
      steps = 1;
    } 
    else {
      pop = new Population(2);
      steps = 10;
    }
  }
  if(img != null) loop = !loop;
  started = true;
      
} //_CODE_:start:267914:

public void reset_click(GButton source, GEvent event) { //_CODE_:reset:383322:
  println("reset - GButton >> GEvent." + event + " @ " + millis());
  loop = false;
  selected.setText("Select an image");
  delay(700);
  img = null;
  pop = null;
  cnv = null;
  cnvCalc = null;
  resize = true;
  t = 0;
  tempTime = 0;
  started = false;
   
} //_CODE_:reset:383322:

public void option1_clicked1(GOption source, GEvent event) { //_CODE_:option1:413873:
  println("option1 - GOption >> GEvent." + event + " @ " + millis());
   selMethod = "Fixed";
} //_CODE_:option1:413873:

public void option2_clicked1(GOption source, GEvent event) { //_CODE_:option2:654708:
  println("option2 - GOption >> GEvent." + event + " @ " + millis());
  selMethod = "Dynamic";

} //_CODE_:option2:654708:

public void checkbox_clicked(GCheckbox source, GEvent event) { //_CODE_:checkbox:537502:
  println("checkbox - GCheckbox >> GEvent." + event + " @ " + millis());
  bw = !bw;

    
} //_CODE_:checkbox:537502:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Genetic Image ");
  controls = GWindow.getWindow(this, "Controls", 0, 0, 350, 200, JAVA2D);
  controls.noLoop();
  controls.setActionOnClose(G4P.EXIT_APP);
  controls.addDrawHandler(this, "controls_draw");
  popsize = new GTextField(controls, 120, 50, 70, 20, G4P.SCROLLBARS_NONE);
  popsize.setText("50");
  popsize.setPromptText("Population size (option for fixed)");
  popsize.setOpaque(true);
  popsize.addEventHandler(this, "popsize_changed");
  numshapes = new GTextField(controls, 230, 50, 70, 20, G4P.SCROLLBARS_NONE);
  numshapes.setText("150");
  numshapes.setPromptText("Number of shapes (option for Fixed)");
  numshapes.setOpaque(true);
  numshapes.addEventHandler(this, "numshapes_change");
  select = new GButton(controls, 10, 10, 90, 30);
  select.setText("Select IMG");
  select.setTextBold();
  select.addEventHandler(this, "select_click");
  start = new GButton(controls, 230, 100, 80, 30);
  start.setText("Start/Stop");
  start.setTextBold();
  start.addEventHandler(this, "start_click");
  selected = new GLabel(controls, 130, 10, 190, 30);
  selected.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  selected.setText("Select an image");
  selected.setOpaque(false);
  reset = new GButton(controls, 120, 100, 80, 30);
  reset.setText("Reset");
  reset.setTextBold();
  reset.addEventHandler(this, "reset_click");
  method = new GToggleGroup();
  option1 = new GOption(controls, 10, 50, 120, 20);
  option1.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  option1.setText("Fixed");
  option1.setOpaque(false);
  option1.addEventHandler(this, "option1_clicked1");
  option2 = new GOption(controls, 10, 70, 120, 20);
  option2.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  option2.setText("Dynamic");
  option2.setOpaque(false);
  option2.addEventHandler(this, "option2_clicked1");
  method.addControl(option1);
  method.addControl(option2);
  option2.setSelected(true);
  generation = new GLabel(controls, 10, 140, 150, 20);
  generation.setText("Generations");
  generation.setOpaque(false);
  shapes = new GLabel(controls, 10, 170, 150, 20);
  shapes.setText("Num. of shapes");
  shapes.setOpaque(false);
  fitness = new GLabel(controls, 170, 140, 150, 20);
  fitness.setText("Fitness");
  fitness.setOpaque(false);
  time = new GLabel(controls, 170, 170, 150, 20);
  time.setText("Time elapsed");
  time.setOpaque(false);
  label1 = new GLabel(controls, 120, 70, 80, 20);
  label1.setText("Population");
  label1.setTextItalic();
  label1.setOpaque(false);
  label2 = new GLabel(controls, 230, 70, 80, 20);
  label2.setText("# of shapes");
  label2.setTextItalic();
  label2.setOpaque(false);
  checkbox = new GCheckbox(controls, 10, 100, 120, 20);
  checkbox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox.setText("B/W");
  checkbox.setOpaque(false);
  checkbox.addEventHandler(this, "checkbox_clicked");
  controls.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow controls;
GTextField popsize; 
GTextField numshapes; 
GButton select; 
GButton start; 
GLabel selected; 
GButton reset; 
GToggleGroup method; 
GOption option1; 
GOption option2; 
GLabel generation; 
GLabel shapes; 
GLabel fitness; 
GLabel time; 
GLabel label1; 
GLabel label2; 
GCheckbox checkbox; 